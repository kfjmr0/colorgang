#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';
var app = require('../app');
var debug = require('debug')('colorgang:server');
var http = require('http');
var crypto = require('crypto');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/**
 * socket.io treating for top page
 */
var io = require('socket.io')(server);//, {'sync disconnect on unload': true });
var os = require('os');
var chat_server = require('./chat_server');
var match_server = require('./match_server');
const common = require('./common');

var roomMap = {}; // room map for rendering top page's room list
var playerRoomList = []; // player's socket.id vs {joined room id and name}
var roomStateList = []; // room id vs that {room's state}
var connectCounter = 0;

io.on('connection', (socket) => {
  //console.log('user entered.');
  var loadavg = os.loadavg();
  var memory_utilization = 1.0 - os.freemem() / os.totalmem();
  connectCounter++;
  //socket.on('connect', function() { connectCounter++; });

  socket.emit('enterTopPage', {
    hasFailedToValidate: false,
    roomMap: roomMap,
    connected_number: connectCounter,
    loadavg: loadavg.toString(),
    memory_utilization: memory_utilization
  });
  
  socket.on('makeRoom', (data) => {
    //TODO check room number bound and duplicate room name and illegal characters
    //TODO emit illegal room or player name
    if (data && data.room_name && data.player_name) {
      if (typeof data.room_name !== "string") { return false; }
      if (typeof data.player_name !== "string") { return false; }
      var room_name = data.room_name.trim();
      var player_name = data.player_name.trim();
      if (room_name.length === 0 ||  player_name.length === 0 || room_name.length > 15 || player_name.length > 10) {
        return false;
      }
      
      if (Object.keys(roomMap).length >= 20) { return false; }
      var existsSameRoomName = false;
      Object.keys(roomMap).forEach((room_id) => {
        if (roomMap[room_id].name === room_name) { existsSameRoomName = true; }
      });
      if (existsSameRoomName) { return false; }
      
    } else {
      return false;
    }
    
    //console.log(player_name + ' ' + room_name);
    
    //set room_id and join room
    var room_id = crypto.randomBytes(16).toString('hex');
    var room = {
      id: room_id,
      name: room_name,
      rm: player_name,
      number: 0
    };
    roomMap[room_id] = room;
    roomStateList[room_id] = {
      memberList : [],
      memberIdList: [],
      room_master: socket.id,
      battle_mode: 'fourMen',
      participatingIdList: [],
      participatingNameList: [],
      teamAIdList: [],
      teamANameList: [],
      teamBIdList: [],
      teamBNameList: [],
      hasStarted: false
    };
    chat_server.createChatStorage(room_id);
    joinRoom(socket, room, player_name);
    
    //console.log(roomMap);
    
    socket.broadcast.emit('addRoom', {
      room: room
    });
  });
    

  socket.on('joinRoom', (data) => {
    if (!data || !data.room_id) {
      console.log('room data is null');
      return false;
    } else if (!roomMap[data.room_id]) {
      common.redirectTopPage(socket);
      console.log('room does not exist in roomMap for room id :' + data.room_id);
      return false;
    }
    
    if (data.player_name) {
      if (typeof data.player_name !== "string") { return false; }
      var player_name = data.player_name.trim();
      if (player_name.length === 0 || player_name.length > 10) {
        return false;
      }
    } else {
      return false;
    }
    
    //console.log('join room:' + data.room_id)
    let room = roomMap[data.room_id];
    joinRoom(socket, room, player_name);
  });
  
  
  socket.on('disconnect', () => {
    console.log('user disconnected');
    //console.log(playerRoomList);
    connectCounter--;
    
    if (playerRoomList[socket.id]) {
      let room_id = playerRoomList[socket.id].room_id;
      let player_name = playerRoomList[socket.id].name;
      if (roomMap[room_id] && roomStateList[room_id]) {
        let roomState = roomStateList[room_id];
        if (roomState.room_master === socket.id) {
          //TODO postprocess of disconnection of room master, disconnect all members and delete rooms
          roomStateList[room_id].memberIdList.forEach((id) => {
            if (id !== roomState.room_master) {
              io.sockets.connected[id].emit('enterTopPage', {
                hasFailedToValidate: true,
                roomMap: {},
                loadavg: '',
                memory_utilization: ''
              });
            }
            delete playerRoomList[id];
          });
          
          chat_server.deleteChatStorage(room_id);
          match_server.postprocessRoomMasterLeaveRoom(io, socket, room_id, roomStateList, playerRoomList);
          delete roomStateList[room_id];
          delete roomMap[room_id];

          
        } else {
          // postprocess of disconnection of member (decrement user number in the room)
          // make chat and match send message and 
          let member_index = roomState.memberIdList.indexOf(socket.id);
          roomState.memberList.splice(member_index, 1);
          roomState.memberIdList.splice(member_index, 1);
          roomMap[room_id].number -= 1;
          
          //console.log();
          chat_server.emitLeaveRoom(io, socket, room_id, roomStateList, player_name);
          
          //TODO if he's in participating list and match hs not started remove his name from list
          //match_server.postprocessLeaveRoom(io, socket, room_id, roomStateList);
          match_server.postprocessMemberLeaveRoom(io, socket, room_id, roomStateList, playerRoomList);
          
          delete playerRoomList[socket.id];
        }
      }
    }
  });
  
  chat_server.setSocket(io, socket, playerRoomList, roomStateList);
  match_server.setSocket(io, socket, playerRoomList, roomStateList);
  
});

function joinRoom(socket, room, player_name) {
  if (roomStateList[room.id]) {
    //TODO check player number bound and not exist same name
    //TODO emit illegalPlayerName
    if (roomStateList[room.id].memberList.length >= 10) { return false; }
    let existsSamePlayerName = false;
    roomStateList[room.id].memberList.forEach((member_name) => {
      if (member_name === player_name) { existsSamePlayerName = true; }
    });
    if (existsSamePlayerName) { return false; }

    roomStateList[room.id].memberList.push(player_name);
    roomStateList[room.id].memberIdList.push(socket.id);
  } else {
    return false;
  }

  socket.join(room.id);
  playerRoomList[socket.id] = {
    room_id: room.id,
    name: player_name
  };
  room.number += 1;
  
  chat_server.emitEnterChat(io, socket, room, roomStateList, player_name);
  match_server.emitEnterMatch(io, socket, room, roomStateList, playerRoomList);
}