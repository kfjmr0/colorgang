#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';
var app = require('../app');
var debug = require('debug')('colorgang:server');
var http = require('http');
var crypto = require('crypto');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



/**
 * socket.io treating and room list
 */
var io = require('socket.io')(server);//, {'sync disconnect on unload': true });
var os = require('os');
var chat_server = require('./chat_server');

var roomMap = {};
var playerRoomList = []; // player's socket.id vs joined room id and name
var roomStateList = []; // room id vs that room's state

io.on('connection', (socket) => {
  //socket.emit('server-status', { loadavg: os.loadavg() });
  console.log('user entered.');
  socket.emit('enterTopPage', { roomMap: roomMap});
  
  socket.on('makeRoom', (data) => {
    //TODO check duplicate room name or player name or illegal characters
    if (data && data.room_name && data.player_name) {
      if (data.room_name.length > 15 || data.player_name.length > 10) {
        return false;
      }
    } else {
      return false;
    }
    
    //console.log(data.player_name + ' ' + data.room_name);
    
    //set room_id and join room
    var room_id = crypto.randomBytes(16).toString('hex');
    var room = {name: data.room_name, rm: data.player_name, number: 0, id: room_id}
    roomMap[room_id] = room;
    roomStateList[room_id] = {
      memberList : []
    };
    chat_server.createChatStorage(room_id);
    joinRoom(socket, room, data.player_name);
    
    console.log(roomMap);
    
    //TODO is that right?
    io.sockets.emit('addRoom', {
      room: room
    });
  });
    
  //TODO join room
  socket.on('joinRoom', (data) => {
    if (!data || !data.room_id) {
      console.log('room data is null');
      return false;
    } else if (!roomMap[data.room_id]) {
       console.log('room does not exist in roomMap for room id :' + data.room_id);
       return false;
    }
    // TODO check player name
    
    console.log('join room:' + data.room_id)
    let room = roomMap[data.room_id];
    joinRoom(socket, room, data.player_name);
  });
  
  
  socket.on('disconnect', (data) => {
    console.log('user disconnected');
    console.log(playerRoomList);
    //TODO postprocess disconection (decrement user number in the room and if he's rm, ...)
    //console.log();
  });
  
  chat_server.setSocket(io, socket, playerRoomList, roomStateList);
  
});

function joinRoom(socket, room, player_name) {
  //TODO null check
  socket.join(room.id);
  playerRoomList[socket.id] = {room_id: room.id, name: player_name};
  room.number += 1;
  roomStateList[room.id].memberList.push(player_name);
  
  chat_server.emitEnterRoom(room, player_name, socket, roomStateList, io);
}